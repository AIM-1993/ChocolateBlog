{"version":3,"sources":["Table.js","Timer.js","Record.js","serviceWorker.js","index.js"],"names":["Table","react_default","a","createElement","className","scope","text","hello","happy","React","Component","Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","_this2","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","Record","error","isLoaded","items","fetch","then","res","json","result","_this$state","message","map","item","key","id","thing","Boolean","window","location","hostname","match","ReactDOM","render","src_Timer","document","getElementById","src_Table_0","src_Record","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oWA+BeA,mLAxBX,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gCACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YACfH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,MACAJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,UACAJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,QACAJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,YAGJJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIE,MAAM,OAAV,KACAJ,EAAAC,EAAAC,cAAA,UAAKG,EAAKC,OACVN,EAAAC,EAAAC,cAAA,UAAKG,EAAKE,OACVP,EAAAC,EAAAC,cAAA,4BAlBQM,IAAMC,WC8BXC,qBA9BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,KAAM,IAAIC,MAFPT,mFAIC,IAAAU,EAAAP,KAClBA,KAAKQ,QAAUC,YACf,kBAAMF,EAAKG,QACX,oDAIAC,cAAcX,KAAKQ,wCAInBR,KAAKY,SAAS,CACZP,KAAM,IAAIC,wCAId,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,6CAAYa,KAAKI,MAAMC,KAAKQ,qBAA5B,cAxBUpB,IAAMC,YCoDXoB,cAnDb,SAAAA,EAAYlB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,IACjBjB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgB,GAAAX,KAAAH,KAAMJ,KACDQ,MAAQ,CACXW,MAAO,KACPC,UAAU,EACVC,MAAO,IALQpB,mFASC,IAAAU,EAAAP,KAClBkB,MAAM,gCACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCf,EAAKK,SAAS,CACZI,UAAU,EACVC,MAAOK,EAAOL,SAMlB,SAACF,GACCR,EAAKK,SAAS,CACZI,UAAU,EACVD,6CAMD,IAAAQ,EAC4BvB,KAAKI,MAAhCW,EADDQ,EACCR,MAAOC,EADRO,EACQP,SAAUC,EADlBM,EACkBN,MACzB,OAAIF,EACK9B,EAAAC,EAAAC,cAAA,qBAAa4B,EAAMS,SAChBR,EAIR/B,EAAAC,EAAAC,cAAA,UACG8B,EAAMQ,IAAI,SAAAC,GAAI,OACbzC,EAAAC,EAAAC,cAAA,MAAIwC,IAAKD,EAAKE,IACXF,EAAKE,GADR,IACaF,EAAKG,UANjB5C,EAAAC,EAAAC,cAAA,gCArCQM,IAAMC,WCQPoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAAWC,SAASC,eAAe,UACnDJ,IAASC,OAAOnD,EAAAC,EAAAC,cAACqD,EAAD,MAAWF,SAASC,eAAe,UACnDJ,IAASC,OAAOnD,EAAAC,EAAAC,cAACsD,EAAD,MAAYH,SAASC,eAAe,WDkH9C,kBAAmBG,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.6a2da9de.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Table.css';\r\nimport text from './text.json';\r\n\r\nclass Table extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className=\"container table-responsive\">\r\n      <table className=\"table table-hover table-dark\">\r\n        <thead className=\"bg-color\">\r\n          <tr>\r\n            <th scope=\"col\">Id</th>\r\n            <th scope=\"col\">Things</th>\r\n            <th scope=\"col\">Edit</th>\r\n            <th scope=\"col\">Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th scope=\"row\">1</th>\r\n            <td>{text.hello}</td>\r\n            <td>{text.happy}</td>\r\n            <td>dss</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n  }\r\n}\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Timer.css';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {date: new Date()}\r\n    }\r\n    componentDidMount() {\r\n      this.timerID = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n    }\r\n    componentWillUnmount() {\r\n      clearInterval(this.timerID);\r\n    }\r\n\r\n    tick() {\r\n      this.setState({\r\n        date: new Date()\r\n      });\r\n    }\r\n    render() {\r\n    return(\r\n      <div className=\"Timer\">\r\n        <header className=\"Timer-header\">\r\n          <h2>现在时间是  {this.state.date.toLocaleTimeString()}.</h2>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nclass Record extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://localhost:8000/todo/1\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result.items\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, items } = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <ul>\r\n          {items.map(item => (\r\n            <li key={item.id}>\r\n              {item.id} {item.thing}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Record;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Table from './Table';\nimport Clock from './Timer';\nimport Record from './Record';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Clock />, document.getElementById('timer'));\nReactDOM.render(<Table />, document.getElementById('table'));\nReactDOM.render(<Record />, document.getElementById('record'));\n// ReactDOM.render(<Record />, document.getElementById('record'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}